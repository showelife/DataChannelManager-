// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "FileInfoExtractService.h"
#include <thrift/protocol/TBinaryProtocol.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

class FileInfoExtractServiceAsyncHandler : public FileInfoExtractServiceCobSvIf {
 public:
  FileInfoExtractServiceAsyncHandler() {
    syncHandler_ = std::auto_ptr<FileInfoExtractServiceHandler>(new FileInfoExtractServiceHandler);
    // Your initialization goes here
  }
  virtual ~FileInfoExtractServiceAsyncHandler();

  void uploadFile(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, const FileData& filedata) {
    bool _return = false;
    _return = syncHandler_->uploadFile(filedata);
    return cob(_return);
  }

 protected:
  std::auto_ptr<FileInfoExtractServiceHandler> syncHandler_;
};

