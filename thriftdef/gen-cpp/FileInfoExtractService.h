/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FileInfoExtractService_H
#define FileInfoExtractService_H

#include <thrift/transport/TBufferTransports.h>
#include <thrift/stdcxx.h>
namespace apache { namespace thrift { namespace async {
class TAsyncChannel;
}}}
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TAsyncDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "dc_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class FileInfoExtractServiceIf {
 public:
  virtual ~FileInfoExtractServiceIf() {}
  virtual bool uploadFile(const FileData& filedata) = 0;
};

class FileInfoExtractServiceIfFactory {
 public:
  typedef FileInfoExtractServiceIf Handler;

  virtual ~FileInfoExtractServiceIfFactory() {}

  virtual FileInfoExtractServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FileInfoExtractServiceIf* /* handler */) = 0;
};

class FileInfoExtractServiceIfSingletonFactory : virtual public FileInfoExtractServiceIfFactory {
 public:
  FileInfoExtractServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<FileInfoExtractServiceIf>& iface) : iface_(iface) {}
  virtual ~FileInfoExtractServiceIfSingletonFactory() {}

  virtual FileInfoExtractServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FileInfoExtractServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<FileInfoExtractServiceIf> iface_;
};

class FileInfoExtractServiceNull : virtual public FileInfoExtractServiceIf {
 public:
  virtual ~FileInfoExtractServiceNull() {}
  bool uploadFile(const FileData& /* filedata */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _FileInfoExtractService_uploadFile_args__isset {
  _FileInfoExtractService_uploadFile_args__isset() : filedata(false) {}
  bool filedata :1;
} _FileInfoExtractService_uploadFile_args__isset;

class FileInfoExtractService_uploadFile_args {
 public:

  FileInfoExtractService_uploadFile_args(const FileInfoExtractService_uploadFile_args&);
  FileInfoExtractService_uploadFile_args& operator=(const FileInfoExtractService_uploadFile_args&);
  FileInfoExtractService_uploadFile_args() {
  }

  virtual ~FileInfoExtractService_uploadFile_args() throw();
  FileData filedata;

  _FileInfoExtractService_uploadFile_args__isset __isset;

  void __set_filedata(const FileData& val);

  bool operator == (const FileInfoExtractService_uploadFile_args & rhs) const
  {
    if (!(filedata == rhs.filedata))
      return false;
    return true;
  }
  bool operator != (const FileInfoExtractService_uploadFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileInfoExtractService_uploadFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileInfoExtractService_uploadFile_pargs {
 public:


  virtual ~FileInfoExtractService_uploadFile_pargs() throw();
  const FileData* filedata;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileInfoExtractService_uploadFile_result__isset {
  _FileInfoExtractService_uploadFile_result__isset() : success(false) {}
  bool success :1;
} _FileInfoExtractService_uploadFile_result__isset;

class FileInfoExtractService_uploadFile_result {
 public:

  FileInfoExtractService_uploadFile_result(const FileInfoExtractService_uploadFile_result&);
  FileInfoExtractService_uploadFile_result& operator=(const FileInfoExtractService_uploadFile_result&);
  FileInfoExtractService_uploadFile_result() : success(0) {
  }

  virtual ~FileInfoExtractService_uploadFile_result() throw();
  bool success;

  _FileInfoExtractService_uploadFile_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const FileInfoExtractService_uploadFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FileInfoExtractService_uploadFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileInfoExtractService_uploadFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FileInfoExtractService_uploadFile_presult__isset {
  _FileInfoExtractService_uploadFile_presult__isset() : success(false) {}
  bool success :1;
} _FileInfoExtractService_uploadFile_presult__isset;

class FileInfoExtractService_uploadFile_presult {
 public:


  virtual ~FileInfoExtractService_uploadFile_presult() throw();
  bool* success;

  _FileInfoExtractService_uploadFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class FileInfoExtractServiceClient : virtual public FileInfoExtractServiceIf {
 public:
  FileInfoExtractServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FileInfoExtractServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool uploadFile(const FileData& filedata);
  void send_uploadFile(const FileData& filedata);
  bool recv_uploadFile();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FileInfoExtractServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<FileInfoExtractServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FileInfoExtractServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_uploadFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FileInfoExtractServiceProcessor(::apache::thrift::stdcxx::shared_ptr<FileInfoExtractServiceIf> iface) :
    iface_(iface) {
    processMap_["uploadFile"] = &FileInfoExtractServiceProcessor::process_uploadFile;
  }

  virtual ~FileInfoExtractServiceProcessor() {}
};

class FileInfoExtractServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FileInfoExtractServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< FileInfoExtractServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< FileInfoExtractServiceIfFactory > handlerFactory_;
};

class FileInfoExtractServiceMultiface : virtual public FileInfoExtractServiceIf {
 public:
  FileInfoExtractServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<FileInfoExtractServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FileInfoExtractServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<FileInfoExtractServiceIf> > ifaces_;
  FileInfoExtractServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<FileInfoExtractServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool uploadFile(const FileData& filedata) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->uploadFile(filedata);
    }
    return ifaces_[i]->uploadFile(filedata);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class FileInfoExtractServiceConcurrentClient : virtual public FileInfoExtractServiceIf {
 public:
  FileInfoExtractServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FileInfoExtractServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool uploadFile(const FileData& filedata);
  int32_t send_uploadFile(const FileData& filedata);
  bool recv_uploadFile(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

class FileInfoExtractServiceCobClient;

class FileInfoExtractServiceCobClIf {
 public:
  virtual ~FileInfoExtractServiceCobClIf() {}
  virtual void uploadFile(::apache::thrift::stdcxx::function<void(FileInfoExtractServiceCobClient* client)> cob, const FileData& filedata) = 0;
};

class FileInfoExtractServiceCobSvIf {
 public:
  virtual ~FileInfoExtractServiceCobSvIf() {}
  virtual void uploadFile(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, const FileData& filedata) = 0;
};

class FileInfoExtractServiceCobSvIfFactory {
 public:
  typedef FileInfoExtractServiceCobSvIf Handler;

  virtual ~FileInfoExtractServiceCobSvIfFactory() {}

  virtual FileInfoExtractServiceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FileInfoExtractServiceCobSvIf* /* handler */) = 0;
};

class FileInfoExtractServiceCobSvIfSingletonFactory : virtual public FileInfoExtractServiceCobSvIfFactory {
 public:
  FileInfoExtractServiceCobSvIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<FileInfoExtractServiceCobSvIf>& iface) : iface_(iface) {}
  virtual ~FileInfoExtractServiceCobSvIfSingletonFactory() {}

  virtual FileInfoExtractServiceCobSvIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FileInfoExtractServiceCobSvIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<FileInfoExtractServiceCobSvIf> iface_;
};

class FileInfoExtractServiceCobSvNull : virtual public FileInfoExtractServiceCobSvIf {
 public:
  virtual ~FileInfoExtractServiceCobSvNull() {}
  void uploadFile(::apache::thrift::stdcxx::function<void(bool const& _return)> cob, const FileData& /* filedata */) {
    bool _return = false;
    return cob(_return);
  }
};

class FileInfoExtractServiceCobClient : virtual public FileInfoExtractServiceCobClIf {
 public:
  FileInfoExtractServiceCobClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel, ::apache::thrift::protocol::TProtocolFactory* protocolFactory) :
    channel_(channel),
    itrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    otrans_(new ::apache::thrift::transport::TMemoryBuffer()),
    piprot_(protocolFactory->getProtocol(itrans_)),
    poprot_(protocolFactory->getProtocol(otrans_)) {
    iprot_ = piprot_.get();
    oprot_ = poprot_.get();
  }
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncChannel> getChannel() {
    return channel_;
  }
  virtual void completed__(bool /* success */) {}
  void uploadFile(::apache::thrift::stdcxx::function<void(FileInfoExtractServiceCobClient* client)> cob, const FileData& filedata);
  void send_uploadFile(const FileData& filedata);
  bool recv_uploadFile();
 protected:
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncChannel> channel_;
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> itrans_;
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::transport::TMemoryBuffer> otrans_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FileInfoExtractServiceAsyncProcessor : public ::apache::thrift::async::TAsyncDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<FileInfoExtractServiceCobSvIf> iface_;
  virtual void dispatchCall(::apache::thrift::stdcxx::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid);
 private:
  typedef  void (FileInfoExtractServiceAsyncProcessor::*ProcessFunction)(::apache::thrift::stdcxx::function<void(bool ok)>, int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_uploadFile(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void return_uploadFile(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, const bool& _return);
  void throw_uploadFile(::apache::thrift::stdcxx::function<void(bool ok)> cob, int32_t seqid, ::apache::thrift::protocol::TProtocol* oprot, void* ctx, ::apache::thrift::TDelayedException* _throw);
 public:
  FileInfoExtractServiceAsyncProcessor(::apache::thrift::stdcxx::shared_ptr<FileInfoExtractServiceCobSvIf> iface) :
    iface_(iface) {
    processMap_["uploadFile"] = &FileInfoExtractServiceAsyncProcessor::process_uploadFile;
  }

  virtual ~FileInfoExtractServiceAsyncProcessor() {}
};

class FileInfoExtractServiceAsyncProcessorFactory : public ::apache::thrift::async::TAsyncProcessorFactory {
 public:
  FileInfoExtractServiceAsyncProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< FileInfoExtractServiceCobSvIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::async::TAsyncProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< FileInfoExtractServiceCobSvIfFactory > handlerFactory_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
