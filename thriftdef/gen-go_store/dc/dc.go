// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package dc

import (
	"bytes"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type Int int32

func IntPtr(v Int) *Int { return &v }

type Short int16

func ShortPtr(v Short) *Short { return &v }

type Long int64

func LongPtr(v Long) *Long { return &v }

// Attributes:
//  - Name
type User struct {
	Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewUser() *User {
	return &User{}
}

func (p *User) GetName() string {
	return p.Name
}
func (p *User) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *User) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *User) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("user"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *User) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

// Attributes:
//  - Name
//  - Buff
type FileData struct {
	Name string `thrift:"name,1,required" db:"name" json:"name"`
	Buff []byte `thrift:"buff,2,required" db:"buff" json:"buff"`
}

func NewFileData() *FileData {
	return &FileData{}
}

func (p *FileData) GetName() string {
	return p.Name
}

func (p *FileData) GetBuff() []byte {
	return p.Buff
}
func (p *FileData) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetName bool = false
	var issetBuff bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetName = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetBuff = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetBuff {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Buff is not set"))
	}
	return nil
}

func (p *FileData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *FileData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Buff = v
	}
	return nil
}

func (p *FileData) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FileData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *FileData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("buff", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:buff: ", p), err)
	}
	if err := oprot.WriteBinary(p.Buff); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.buff (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:buff: ", p), err)
	}
	return err
}

func (p *FileData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileData(%+v)", *p)
}

type DatecService interface {
	// Parameters:
	//  - S
	StringInfo(ctx context.Context, s string) (r string, err error)
	// Parameters:
	//  - S
	Heart(ctx context.Context, s string) (err error)
}

type DatecServiceClient struct {
	c thrift.TClient
}

func NewDatecServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DatecServiceClient {
	return &DatecServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewDatecServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DatecServiceClient {
	return &DatecServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewDatecServiceClient(c thrift.TClient) *DatecServiceClient {
	return &DatecServiceClient{
		c: c,
	}
}

func (p *DatecServiceClient) Client_() thrift.TClient {
	return p.c
}

// Parameters:
//  - S
func (p *DatecServiceClient) StringInfo(ctx context.Context, s string) (r string, err error) {
	var _args0 DatecServiceStringInfoArgs
	_args0.S = s
	var _result1 DatecServiceStringInfoResult
	if err = p.Client_().Call(ctx, "stringInfo", &_args0, &_result1); err != nil {
		return
	}
	return _result1.GetSuccess(), nil
}

// Parameters:
//  - S
func (p *DatecServiceClient) Heart(ctx context.Context, s string) (err error) {
	var _args2 DatecServiceHeartArgs
	_args2.S = s
	if err := p.Client_().Call(ctx, "heart", &_args2, nil); err != nil {
		return err
	}
	return nil
}

type DatecServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      DatecService
}

func (p *DatecServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *DatecServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *DatecServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewDatecServiceProcessor(handler DatecService) *DatecServiceProcessor {

	self3 := &DatecServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self3.processorMap["stringInfo"] = &datecServiceProcessorStringInfo{handler: handler}
	self3.processorMap["heart"] = &datecServiceProcessorHeart{handler: handler}
	return self3
}

func (p *DatecServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x4.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x4

}

type datecServiceProcessorStringInfo struct {
	handler DatecService
}

func (p *datecServiceProcessorStringInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatecServiceStringInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("stringInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DatecServiceStringInfoResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.StringInfo(ctx, args.S); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing stringInfo: "+err2.Error())
		oprot.WriteMessageBegin("stringInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("stringInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type datecServiceProcessorHeart struct {
	handler DatecService
}

func (p *datecServiceProcessorHeart) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DatecServiceHeartArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.Heart(ctx, args.S); err2 != nil {
		return true, err2
	}
	return true, nil
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - S
type DatecServiceStringInfoArgs struct {
	S string `thrift:"s,1" db:"s" json:"s"`
}

func NewDatecServiceStringInfoArgs() *DatecServiceStringInfoArgs {
	return &DatecServiceStringInfoArgs{}
}

func (p *DatecServiceStringInfoArgs) GetS() string {
	return p.S
}
func (p *DatecServiceStringInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatecServiceStringInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.S = v
	}
	return nil
}

func (p *DatecServiceStringInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("stringInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatecServiceStringInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("s", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:s: ", p), err)
	}
	if err := oprot.WriteString(string(p.S)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.s (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:s: ", p), err)
	}
	return err
}

func (p *DatecServiceStringInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatecServiceStringInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DatecServiceStringInfoResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDatecServiceStringInfoResult() *DatecServiceStringInfoResult {
	return &DatecServiceStringInfoResult{}
}

var DatecServiceStringInfoResult_Success_DEFAULT string

func (p *DatecServiceStringInfoResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return DatecServiceStringInfoResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *DatecServiceStringInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DatecServiceStringInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatecServiceStringInfoResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *DatecServiceStringInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("stringInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatecServiceStringInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DatecServiceStringInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatecServiceStringInfoResult(%+v)", *p)
}

// Attributes:
//  - S
type DatecServiceHeartArgs struct {
	S string `thrift:"s,1" db:"s" json:"s"`
}

func NewDatecServiceHeartArgs() *DatecServiceHeartArgs {
	return &DatecServiceHeartArgs{}
}

func (p *DatecServiceHeartArgs) GetS() string {
	return p.S
}
func (p *DatecServiceHeartArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DatecServiceHeartArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.S = v
	}
	return nil
}

func (p *DatecServiceHeartArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("heart_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DatecServiceHeartArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("s", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:s: ", p), err)
	}
	if err := oprot.WriteString(string(p.S)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.s (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:s: ", p), err)
	}
	return err
}

func (p *DatecServiceHeartArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatecServiceHeartArgs(%+v)", *p)
}

type FileInfoExtractService interface {
	// Parameters:
	//  - Filedata
	UploadFile(ctx context.Context, filedata *FileData) (r bool, err error)
}

type FileInfoExtractServiceClient struct {
	c thrift.TClient
}

func NewFileInfoExtractServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FileInfoExtractServiceClient {
	return &FileInfoExtractServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewFileInfoExtractServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FileInfoExtractServiceClient {
	return &FileInfoExtractServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewFileInfoExtractServiceClient(c thrift.TClient) *FileInfoExtractServiceClient {
	return &FileInfoExtractServiceClient{
		c: c,
	}
}

func (p *FileInfoExtractServiceClient) Client_() thrift.TClient {
	return p.c
}

// Parameters:
//  - Filedata
func (p *FileInfoExtractServiceClient) UploadFile(ctx context.Context, filedata *FileData) (r bool, err error) {
	var _args7 FileInfoExtractServiceUploadFileArgs
	_args7.Filedata = filedata
	var _result8 FileInfoExtractServiceUploadFileResult
	if err = p.Client_().Call(ctx, "uploadFile", &_args7, &_result8); err != nil {
		return
	}
	return _result8.GetSuccess(), nil
}

type FileInfoExtractServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      FileInfoExtractService
}

func (p *FileInfoExtractServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *FileInfoExtractServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *FileInfoExtractServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewFileInfoExtractServiceProcessor(handler FileInfoExtractService) *FileInfoExtractServiceProcessor {

	self9 := &FileInfoExtractServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self9.processorMap["uploadFile"] = &fileInfoExtractServiceProcessorUploadFile{handler: handler}
	return self9
}

func (p *FileInfoExtractServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x10 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x10.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x10

}

type fileInfoExtractServiceProcessorUploadFile struct {
	handler FileInfoExtractService
}

func (p *fileInfoExtractServiceProcessorUploadFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FileInfoExtractServiceUploadFileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("uploadFile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FileInfoExtractServiceUploadFileResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.UploadFile(ctx, args.Filedata); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing uploadFile: "+err2.Error())
		oprot.WriteMessageBegin("uploadFile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("uploadFile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Filedata
type FileInfoExtractServiceUploadFileArgs struct {
	Filedata *FileData `thrift:"filedata,1" db:"filedata" json:"filedata"`
}

func NewFileInfoExtractServiceUploadFileArgs() *FileInfoExtractServiceUploadFileArgs {
	return &FileInfoExtractServiceUploadFileArgs{}
}

var FileInfoExtractServiceUploadFileArgs_Filedata_DEFAULT *FileData

func (p *FileInfoExtractServiceUploadFileArgs) GetFiledata() *FileData {
	if !p.IsSetFiledata() {
		return FileInfoExtractServiceUploadFileArgs_Filedata_DEFAULT
	}
	return p.Filedata
}
func (p *FileInfoExtractServiceUploadFileArgs) IsSetFiledata() bool {
	return p.Filedata != nil
}

func (p *FileInfoExtractServiceUploadFileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileInfoExtractServiceUploadFileArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Filedata = &FileData{}
	if err := p.Filedata.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Filedata), err)
	}
	return nil
}

func (p *FileInfoExtractServiceUploadFileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("uploadFile_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileInfoExtractServiceUploadFileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("filedata", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:filedata: ", p), err)
	}
	if err := p.Filedata.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Filedata), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:filedata: ", p), err)
	}
	return err
}

func (p *FileInfoExtractServiceUploadFileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileInfoExtractServiceUploadFileArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FileInfoExtractServiceUploadFileResult struct {
	Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFileInfoExtractServiceUploadFileResult() *FileInfoExtractServiceUploadFileResult {
	return &FileInfoExtractServiceUploadFileResult{}
}

var FileInfoExtractServiceUploadFileResult_Success_DEFAULT bool

func (p *FileInfoExtractServiceUploadFileResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return FileInfoExtractServiceUploadFileResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FileInfoExtractServiceUploadFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FileInfoExtractServiceUploadFileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileInfoExtractServiceUploadFileResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FileInfoExtractServiceUploadFileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("uploadFile_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileInfoExtractServiceUploadFileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FileInfoExtractServiceUploadFileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileInfoExtractServiceUploadFileResult(%+v)", *p)
}
